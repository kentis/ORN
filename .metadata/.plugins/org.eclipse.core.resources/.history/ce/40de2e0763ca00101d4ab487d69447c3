package org.k1s.epkn.cpnimport;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import javax.management.RuntimeErrorException;
import javax.xml.parsers.ParserConfigurationException;

import nppnnets.NppnnetsFactory;
import nppnnets.Place;
import nppnnets.Pragmatics;
import nppnnets.Transition;
import nppnnets.impl.NppnnetsFactoryImpl;

//import org.cpntools.accesscpn.model.Transition;
import org.cpntools.accesscpn.model.importer.DOMParser;
import org.cpntools.accesscpn.model.importer.NetCheckException;
import org.pnml.tools.epnk.pnmlcoremodel.Name;

import org.pnml.tools.epnk.pnmlcoremodel.impl.PnmlcoremodelFactoryImpl;
import org.pnml.tools.epnk.pnmlcoremodel.serialisation.PNMLFactory;
import org.pnml.tools.epnk.pntypes.hlpng.pntd.hlpngdefinition.Page;
import org.pnml.tools.epnk.pntypes.hlpng.pntd.hlpngdefinition.impl.HlpngdefinitionFactoryImpl;
import org.xml.sax.SAXException;


public class CPNTranslator {

	
	public List<Page> translate(String cpn){
		try {
			return translate(new FileInputStream(new File(cpn)));
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
	
	public List<Page> translate(InputStream cpn){
		List<Page>  pages = new ArrayList<Page>();
		
		org.cpntools.accesscpn.model.PetriNet pn = null;
		
		try {
			pn = DOMParser.parse(cpn, "");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RuntimeException(e);
		} 
		
		for(org.cpntools.accesscpn.model.Page cpnPage : pn.getPage()){
			Page page = HlpngdefinitionFactoryImpl.eINSTANCE.createPage();
			Name name = new PnmlcoremodelFactoryImpl().createName();
			name.setText(cpnPage.getName().getText());
			page.setName(name);
			copyPage(cpnPage, page);
			pages.add(page);
		}
		
		return pages;
	}
	
	
	/**
	 * Copies places and transitions
	 * 
	 * TODO: Arcs, ports, substitution transitions
	 * @param source
	 * @param target
	 */
	public void copyPage(org.cpntools.accesscpn.model.Page source, Page target){
		for(org.cpntools.accesscpn.model.Place sPlace : source.place()){
			Place place = transformPlace(sPlace);
			target.getObject().add(place);
		}
		
		for(org.cpntools.accesscpn.model.Transition sTrans : source.transition()){
			Transition trans = transformTansition(sTrans);
			target.getObject().add(trans);
		}
		
	}
	
	
	private Transition transformTansition(org.cpntools.accesscpn.model.Transition sTrans) {
		Transition trans = NppnnetsFactory.eINSTANCE.createTransition();
		Name name = createName(delPrag(sTrans.getName().getText()));
		trans.setName(name);
		Pragmatics prag = NppnnetsFactory.eINSTANCE.createPragmatics();
		prag.setText(getPrag(sTrans.getName().getText()));
		trans.getPragmatics().add(prag);
		return trans;
	}

	public Place transformPlace(org.cpntools.accesscpn.model.Place place){
		Place p = NppnnetsFactory.eINSTANCE.createPlace();
		p.setName(createName(delPrag(place.getName().getText())));
		
		Pragmatics prag = NppnnetsFactory.eINSTANCE.createPragmatics();
		prag.setText(getPrag(place.getName().getText()));
		
		p.getPragmatics().add(prag);
		return p;
	}
	
	public Name createName(String nameS){
		Name name = new PnmlcoremodelFactoryImpl().createName();
		name.setText(nameS);
		return name;
	}
	
	
	protected String getPrag(String elemName){
		if(elemName == null) return "";
		String retval = null;
		
		if(elemName.indexOf("<<") == -1 ) return null;
		
		int pragStart = elemName.indexOf( "<<") + 2;
		int pragEnd = elemName.indexOf(">>");
		//println elemName
		String pragDef = elemName.substring(pragStart, pragEnd);
		
		return pragDef;
	}
	
	protected String delPrag(String elemName){
		if(elemName == null) return "";
		String retval = null;
		
		if(elemName.indexOf("(*<<") != -1 ) return elemName.substring(0, elemName.indexOf("(*<<"));
		if(elemName.indexOf("<<") != -1 ) return elemName.substring(0, elemName.indexOf("<<"));
		
		return elemName;
	}
	
	
/*	public String getAsString(String cpnFile){
		File file = new File(cpnFile);
		byte[] b = new byte[(int) file.length()];
		FileInputStream fis;
		try {
			fis = new FileInputStream(file);
			  
		    fis.read(b);  
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException ioe){
			ioe.printStackTrace();
		}
	    return new String(b);
	}*/
}
